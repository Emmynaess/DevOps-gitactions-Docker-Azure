name: CI/CD Pipeline

on:
  workflow_dispatch:
    inputs:
      log_errors:
        description: 'Set to true to generate a log-error artifact if tests fail'
        required: true
        default: 'false'

env:
  DOCKER_IMAGE_NAME: emmynaessrieback/devops_project_emmy

jobs:

  fetch-data:
    name: Fetch Data from SMHI API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify API_SMHI_KEY
        env:
          API_SMHI_KEY: ${{ secrets.API_SMHI_KEY }}
        run: |
          if [ -z "$API_SMHI_KEY" ]; then
            echo "API_SMHI_KEY is empty!"
            exit 1
          else
            echo "API_SMHI_KEY is set."
          fi

      - name: Fetch Weather Data
        env:
          API_SMHI_KEY: ${{ secrets.API_SMHI_KEY }}
        run: |
          curl "$API_SMHI_KEY" -o weather.json

      - name: Save Data as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: weather-data
          path: weather.json
          
  run-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: fetch-data
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install jq and bc
        run: |
          sudo apt-get update && sudo apt-get install -y jq bc

      - name: Download Weather Data
        uses: actions/download-artifact@v3
        with:
          name: weather-data

      - name: Print weather.json
        run: |
          cat weather.json

      - name: Run Tests
        run: |
          echo "Running tests..."

          # Hämta olika parametrar med jq
          TEMPERATURE=$(jq -r '.timeSeries[0].parameters[] | select(.name=="t") | .values[0]' weather.json)
          WIND_SPEED=$(jq -r '.timeSeries[0].parameters[] | select(.name=="ws") | .values[0]' weather.json)
          HUMIDITY=$(jq -r '.timeSeries[0].parameters[] | select(.name=="r") | .values[0]' weather.json)
          AIR_PRESSURE=$(jq -r '.timeSeries[0].parameters[] | select(.name=="msl") | .values[0]' weather.json)
          PRECIPITATION_CATEGORY=$(jq -r '.timeSeries[0].parameters[] | select(.name=="pcat") | .values[0]' weather.json)

          echo "Temperature is $TEMPERATURE°C"
          echo "Wind Speed is $WIND_SPEED m/s"
          echo "Relative Humidity is $HUMIDITY%"
          echo "Air Pressure is $AIR_PRESSURE hPa"
          echo "Precipitation Category is $PRECIPITATION_CATEGORY"

          # Testar om temperaturen är inom ett rimligt intervall (-50°C till 50°C)
          if (( $(echo "$TEMPERATURE >= -50 && $TEMPERATURE <= 50" | bc -l) )); then
            echo "Temperature is within a reasonable range."
          else
            echo "Temperature is outside of reasonable range!"
            exit 1
          fi

          # Testar om vindhastigheten är inom ett rimligt intervall (0 m/s till 60 m/s)
          if (( $(echo "$WIND_SPEED >= 0 && $WIND_SPEED <= 60" | bc -l) )); then
            echo "Wind speed is within a reasonable range."
          else
            echo "Wind speed is outside of reasonable range!"
            exit 1
          fi

          # Testar om luftfuktigheten är inom 0% till 100%
          if (( $(echo "$HUMIDITY >= 0 && $HUMIDITY <= 100" | bc -l) )); then
            echo "Relative humidity is within a valid range."
          else
            echo "Relative humidity is outside of valid range!"
            exit 1
          fi

          # Testar om lufttrycket är inom typiska värden (300 hPa till 1100 hPa)
          if (( $(echo "$AIR_PRESSURE >= 300 && $AIR_PRESSURE <= 1100" | bc -l) )); then
            echo "Air pressure is within a reasonable range."
          else
            echo "Air pressure is outside of reasonable range!"
            exit 1
          fi

          # Testar om nederbördstypen är en känd kategori (0 till 6)
          if (( $(echo "$PRECIPITATION_CATEGORY >= 0 && $PRECIPITATION_CATEGORY <= 6" | bc -l) )); then
            echo "Precipitation category is valid."
          else
            echo "Precipitation category is invalid!"
            exit 1
          fi

        continue-on-error: true

      - name: Upload Error Logs
        if: ${{ failure() && github.event.inputs.log_errors == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-error-logs
          path: test.log 

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: run-tests
    if: ${{ needs.run-tests.result == 'success' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.EMMY_DOCKER_USERNAME }}
          password: ${{ secrets.EMMY_DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
